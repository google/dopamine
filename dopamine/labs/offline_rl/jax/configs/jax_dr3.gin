# Hyperparameters follow the classic Nature DQN, but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.
import dopamine.discrete_domains.atari_lib
import dopamine.discrete_domains.run_experiment
import dopamine.jax.agents.dqn.dqn_agent
import dopamine.labs.offline_rl.fixed_replay
import dopamine.labs.offline_rl.jax.networks
import dopamine.labs.offline_rl.jax.offline_dr3_agent

JaxDQNAgent.gamma = 0.99
JaxDQNAgent.update_horizon = 1
JaxDQNAgent.min_replay_history = 20000  # agent steps
JaxDQNAgent.update_period = 1
JaxDQNAgent.target_update_period = 2000  # agent steps
JaxDQNAgent.epsilon_train = 0.01
JaxDQNAgent.epsilon_eval = 0.001
JaxDQNAgent.epsilon_decay_period = 250000  # agent steps
JaxDQNAgent.min_replay_history = 32
# Note: We are using the Adam optimizer by default for JaxDQN, which differs
#       from the original NatureDQN and the dopamine TensorFlow version. In
#       the experiments we have ran, we have found that using Adam yields
#       improved training performance.
JaxDQNAgent.optimizer = 'adam'
JaxDQNAgent.network = @networks.JAXDQNNetworkWithRepresentations
# Use the learning rates used by Agarwal et al. (2020)
create_optimizer.learning_rate = 0.00005
create_optimizer.eps = 0.0003125
JaxDQNAgent.summary_writing_frequency = 2500


OfflineJaxDR3Agent.dr3_coefficient = 0.1

atari_lib.create_atari_environment.game_name = 'Pong'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = True
create_agent.agent_name = 'jax_dr3'
create_agent.debug_mode = False
Runner.num_iterations = 200
Runner.training_steps = 62500  # agent steps
Runner.evaluation_steps = 125000  # agent steps
Runner.max_steps_per_episode = 27000  # agent steps

JaxFixedReplayBuffer.replay_capacity = 1000000
JaxFixedReplayBuffer.batch_size = 32
